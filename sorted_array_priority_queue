#ifndef SORTEDPQ_H
#define SORTEDPQ_H

#include "Eecs281PQ.h"
#include <algorithm>
#include <iostream>

// A specialized version of the 'heap' ADT that is implemented with an
// underlying sorted array-based container.
// Note: The most extreme element should be found at the end of the
// 'data' container, such that traversing the iterators yields the elements in
// sorted order.
template<typename TYPE, typename COMP_FUNCTOR = std::less<TYPE>>
class SortedPQ : public Eecs281PQ<TYPE, COMP_FUNCTOR> {
    // This is a way to refer to the base class object.
    using BaseClass = Eecs281PQ<TYPE, COMP_FUNCTOR>;

public:
    // Description: Construct an empty heap with an optional comparison functor.
    // Runtime: O(1)
    explicit SortedPQ(COMP_FUNCTOR comp = COMP_FUNCTOR()) :
        BaseClass{ comp } {
        // TODO: Implement this function
        
    } // SortedPQ


    // Description: Construct a heap out of an iterator range with an optional
    //              comparison functor.
    // Runtime: O(n log n) where n is number of elements in range.
    // TODO: When you implement this function, uncomment the parameter names.
    template<typename InputIterator>
    SortedPQ(InputIterator start, InputIterator end, COMP_FUNCTOR comp = COMP_FUNCTOR()) :
        BaseClass{ comp }, data{start,end} {
        // TODO: Implement this function
        sort(data.begin(), data.end(),this->compare);
    } // SortedPQ


    // Description: Destructor doesn't need any code, the data vector will
    //              be destroyed automaticslly.
    virtual ~SortedPQ() {
    } // ~SortedPQ()


    // Description: Add a new element to the heap.
    // Runtime: O(n)
    // TODO: When you implement this function, uncomment the parameter names.
    virtual void push(const TYPE & val) {
        // TODO: Implement this function
        if (empty()) {
            data.push_back(val);
            return;
        }
        typename std::vector<TYPE>::iterator i = std::lower_bound(data.begin(), data.end(), val,this->compare);
        if (i != data.end()) {
            data.insert(i, val);
        }
        else {
            data.push_back(val);
        }
        /*
        data.push_back(val);
        size_t j = size();
        if (this->compare(getElement(1),val)) {
            while (this->compare(val, getElement(j-1))) {
                data[j-2] = data[j-1];
                j--;
            }
            data[j-1] = val;
        }
        else {
            j = size() - 1;
            while (j != 0) {
                data[j] = data[j - 1];
            }
            data[0] = val;
        }*/
    } // push()


    // Description: Remove the most extreme (defined by 'compare') element from
    //              the heap.
    // Note: We will not run tests on your code that would require it to pop an
    // element when the heap is empty. Though you are welcome to if you are
    // familiar with them, you do not need to use exceptions in this project.
    // Runtime: Amortized O(1)
    virtual void pop() {
        // TODO: Implement this function
        if (empty()) {
            return;
        }
        data.pop_back();
    } // pop()


    // Description: Return the most extreme (defined by 'compare') element of
    //              the vector.  This should be a reference for speed.  It MUST
    //              be const because we cannot allow it to be modified, as that
    //              might make it no longer be the most extreme element.
    // Runtime: O(1)
    virtual const TYPE & top() const {
        // TODO: Implement this function

        return data[size()-1];      // TODO: Delete or change this line
    } // top()


    // Description: Get the number of elements in the heap.
    //              This has been implemented for you.
    // Runtime: O(1)
    virtual std::size_t size() const {
        return data.size();
    } // size()


    // Description: Return true if the heap is empty.
    //              This has been implemented for you.
    // Runtime: O(1)
    virtual bool empty() const {
        return data.empty();
    } // empty()


    // Description: Assumes that all elements inside the heap are out of order and
    //              'rebuilds' the heap by fixing the heap invariant.
    // Runtime: O(n log n)
    virtual void updatePriorities() {
        // TODO: Implement this function
        sort(data.begin(), data.end(),this->compare);
    } // updatePriorities()


private:
    // Note: This vector *must* be used your heap implementation.
    std::vector<TYPE> data;
    void swap(const int& index1, const int& index2) {
        const int vic = getElement(index1);
        data[index1 - 1] = getElement(index2);
        data[index2 - 1] = vic;
    }

    TYPE& getElement(std::size_t i) {
        return data[i - 1];
    }

    const TYPE& getElement(std::size_t i) const {
        return data[i - 1];
    }
    // TODO: Add any additional member functions or data you require here.

}; // SortedPQ

#endif // SORTEDPQ_H

